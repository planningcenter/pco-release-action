name: PCO-Release - QA Release Automation
on:
  workflow_call:
    inputs:
      # Node Specific Inputs
      install-command:
        description: "The script command to use to install the package's dependencies"
        required: false
        type: string
        default: 'yarn install --check-files'
      node-version:
        description: 'The version of node to use'
        required: false
        type: string
        default: '20'
      cache:
        description: "Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm, or '' for no caching."
        required: false
        type: string
        default: 'yarn'

      # Deploy Specific Inputs
      only:
        description: "Only run on specific repos. This is a comma separated list of repo names (ie 'people,services,groups')"
        required: false
        type: string
        default: ''
      include:
        description: 'repos to include without checking. Comma separated list'
        required: false
        type: string
        default: ''
      exclude:
        description: 'repos to exclude without checking. Comma separated list'
        required: false
        type: string
        default: ''
      lerna-json-path:
        description: 'path to lerna.json'
        required: false
        type: string
        default: 'lerna.json'
jobs:
  react-to-comment:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '@pco-release qa')
    runs-on: ubuntu-latest
    steps:
      - name: Add reactions
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{github.event.comment.id}}
          reactions: '+1'
  create-qa-release:
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '@pco-release qa')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Get PR head ref
        id: get-pr-ref
        uses: actions/github-script@v7
        with:
          script: |
            const issueUrl = context.payload.issue.pull_request.url;
            const prNumber = issueUrl.split('/').pop();
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            return pr.data.head.ref;
          result-encoding: string
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-pr-ref.outputs.result }}
          fetch-tags: true
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version}}
          cache: ${{ inputs.cache }}
      - name: Cache node_modules
        uses: planningcenter/pco-release-action/node-cache@v1
        with:
          cache: ${{ inputs.cache}}
          node-version: ${{ inputs.node-version }}
      - run: echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" >> ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PLANNINGCENTER_NPM_TOKEN }}
      - run: ${{ inputs.install-command }}
      - run: git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - run: git config --global user.name "github-actions[bot]"
      - name: Get last QA version
        id: get-last-qa-version
        run: |
          git fetch --tags
          LAST_VERSION=$(git tag -l "*-qa-${{ github.event.issue.number }}*" --sort=-v:refname | head -n 1)
          echo "last_version=$LAST_VERSION" >> $GITHUB_OUTPUT
      - name: Run checks to see if we should run
        id: check-if-should-run
        run: |
          if [ -z "${{ steps.get-last-qa-version.outputs.last_version }}" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "skip_manual_lerna_update=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          LAST_VERSION_SHA=$(git rev-list -n 1 --skip=1 ${{ steps.get-last-qa-version.outputs.last_version }})
          CURRENT_SHA=$(git rev-parse HEAD)
          if [ "$LAST_VERSION_SHA" != "$CURRENT_SHA" ]; then
            echo "amend_commit=true" >> $GITHUB_OUTPUT
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
      - if: steps.check-if-should-run.outputs.should_run == 'true' && steps.check-if-should-run.outputs.skip_manual_lerna_update != 'true'
        name: Update lerna.json version for next release
        run: |
          new_version="${{ steps.get-last-qa-version.outputs.last_version }}"
          jq --arg new_version "$new_version" '.version = $new_version' lerna.json > lerna.tmp.json && mv lerna.tmp.json lerna.json
          git add lerna.json
          git commit -m "QA Release"
      - name: Run lerna build
        if: steps.check-if-should-run.outputs.should_run == 'true'
        run: ./node_modules/.bin/lerna run build
      - if: steps.check-if-should-run.outputs.should_run == 'true'
        name: Run lerna publish
        run: |
          possible_amend_command=$(if [ "${{ steps.check-if-should-run.outputs.amend_commit }}" == "true" ]; then echo "--amend"; fi)
          ./node_modules/.bin/lerna publish --conventional-prerelease --conventionalCommits --createRelease=github --preid="qa-${{ github.event.issue.number }}" --dist-tag=qa --summary-file -y --no-push $possible_amend_command
          git push origin --tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set results to output
        if: steps.check-if-should-run.outputs.should_run == 'true'
        run: |
          echo releases=$(cat ./lerna-publish-summary.json) >> $GITHUB_OUTPUT
          echo version=$(cat ./lerna-publish-summary.json | jq -r '.[0].version') >> $GITHUB_OUTPUT
          echo packageNames=$(cat ./lerna-publish-summary.json | jq -r '[.[].packageName] | join(",")') >> $GITHUB_OUTPUT
        id: published_packages
    outputs:
      releases: ${{ steps.published_packages.outputs.releases }}
      version: ${{ steps.published_packages.outputs.version }}
      packageNames: ${{ steps.published_packages.outputs.packageNames }}
  deploy-to-proto-for-consumers:
    needs: create-qa-release
    runs-on: ubuntu-latest
    if: ${{ needs.create-qa-release.outputs.releases }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Push to protonova branch for Consumers
        uses: planningcenter/pco-release-action/deploy@v1
        if: ${{ !contains(github.event.comment.body, '--no-deploy') }}
        with:
          app-id: ${{ secrets.PCO_DEPENDENCIES_APP_ID }}
          private-key: ${{ secrets.PCO_DEPENDENCIES_PRIVATE_KEY }}
          ref: v${{ needs.create-qa-release.outputs.version }}
          package-names: ${{ needs.create-qa-release.outputs.packageNames }}
          change-method: 'merge'
          branch-name: 'proto/${{ github.event.repository.name }}-${{ github.event.issue.number }}'
          only: ${{ inputs.only }}
          exclude: ${{ inputs.exclude }}
          include: ${{ inputs.include }}
          allow-major: true
          package-json-path: ${{ inputs.lerna-json-path }}
      - name: Post results to original PR
        uses: planningcenter/pco-release-action/reporting@v1
        if: ${{ needs.create-qa-release.outputs.version }}
        with:
          pr-number: ${{ github.event.issue.number }}
          results-json: ${{ env.results_json }}
          version-tag: v${{ needs.create-qa-release.outputs.version }}
          actor: ${{ github.actor }}
          proto-tag: '${{ github.event.repository.name }}-${{ github.event.issue.number }}'
          release-type: 'QA'
  report-previous-version:
    needs: create-qa-release
    if: ${{ !needs.create-qa-release.outputs.releases }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.issue.number }}
        with:
          script: |
            if (!process.env.PR_NUMBER) return
            const header = `## No QA release created`
            const body = "There are no new changes to release, so please use the previous QA version."

            github.rest.issues.createComment({
              issue_number: process.env.PR_NUMBER,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${header}\n\n${body}`
            });
