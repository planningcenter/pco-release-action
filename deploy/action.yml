name: "PCO Release Deploy"
description: "Deploys updates of a new release to all planningcenter repos that have a package as its dependency"
inputs:
  github-token:
    description: "GitHub token for authentication"
    required: true
  owner:
    description: "Owner of the repositories"
    required: false
    default: "planningcenter"
  only:
    description: "Only run on specific repos. This is a comma separated list of repo names (ie 'people,services,groups')"
    required: false
    default: ""
  package-name:
    description: "The name of the package to update"
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: "20"
    - name: Find Repos to update
      id: find-repos
      shell: bash
      run: |
        PAGE=1
        REPOS=()
        IFS=',' read -r -a ONLY_REPOS <<< "${{ inputs.only }}"

        while : ; do
          URL="https://api.github.com/orgs/${{ inputs.owner }}/repos?&per_page=100&page=$PAGE"
          echo "URL: $URL"
          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" $URL)
          CURRENT_PAGE_REPOS=$(echo "$RESPONSE" | jq -r '.[] | select(.archived == false) | .name')
          if [[ -z "$CURRENT_PAGE_REPOS" ]]; then
            break # Exit loop if no more repos
          fi
          for REPO in $CURRENT_PAGE_REPOS; do
            if [[ -n "${{ inputs.only }}" ]]; then
              if printf '%s\n' "${ONLY_REPOS[@]}" | grep -qx "$REPO"; then
                REPOS+=("$REPO")
              fi
            else
              REPOS+=("$REPO")
            fi
          done
          ((PAGE++))
        done

        PACKAGE_NAME="${{ inputs.package-name }}"
        FILTERED_REPOS=()
        for REPO in "${REPOS[@]}"; do
          DEPENDENCY_FILE_CONTENT=""
          if DEPENDENCY_FILE_CONTENT=$(gh api repos/${{ inputs.owner }}/$REPO/contents/package.json --jq '.content' 2>/dev/null); then
            DEPENDENCY_FILE=$(echo "$DEPENDENCY_FILE_CONTENT" | base64 --decode)
            if [[ $DEPENDENCY_FILE == *"$PACKAGE_NAME"* ]]; then
              FILTERED_REPOS+=("$REPO")
            fi
          fi
        done
        REPO_LIST=$(IFS=,; echo "${FILTERED_REPOS[*]}")
        echo "::set-output name=repo_list::$REPO_LIST"
      env:
        GH_TOKEN: ${{ inputs.github-token }}
    - name: Auto Deploy to all consumer repos
      id: auto-deploy
      shell: bash
      run: |
        REPO_LIST="${{ steps.find-repos.outputs.repo_list }}"
        IFS=',' read -r -a REPOS <<< "$REPO_LIST"
        declare -A REPO_ERRORS
        GITHUB_REPO_URL="https://github.com/${{ inputs.OWNER }}/$repo.git"

        report_error() {
          local repo=$1
          local message=$2
          REPO_ERRORS[$repo]+="; $message"
        }

        log() {
          echo "[PCO-Release] $1"
        }

        clone_repo() {
          local repo=$1
          log "Cloning $GITHUB_REPO_URL"
          if ! git clone https://${GH_TOKEN}:x-oauth-basic@github.com/${{ inputs.OWNER }}/$repo.git --depth=1; then
            report_error $repo "Failed to clone repository"
            return 1
          fi
        }

        for REPO in "${REPOS[@]}"; do
          echo "[PCO-Release] updating ${{ inputs.package-name }} in $REPO"
          if ! clone_repo $REPO; then
            continue
          fi
        done

        # Error Reporting
        if [ ${#REPO_ERRORS[@]} -ne 0 ]; then
          log "Errors occurred in the following repositories:"
          for REPO in "${!REPO_ERRORS[@]}"; do
            log "$REPO: ${REPO_ERRORS[$REPO]}"
          done
          exit 1
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }}
